## 指定数据源名称
#spring.shardingsphere.datasource.names=ds1,ds2
#
## 配置第一个数据源的参数
#spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.ds1.url=jdbc:mysql://192.168.72.80:3306/shardingsphere
#spring.shardingsphere.datasource.ds1.username=root
#spring.shardingsphere.datasource.ds1.password=123456
#
## 配置第二个数据源参数
#spring.shardingsphere.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
#spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driver
#spring.shardingsphere.datasource.ds2.url=jdbc:mysql://192.168.72.81:3306/shardingsphere
#spring.shardingsphere.datasource.ds2.username=root
#spring.shardingsphere.datasource.ds2.password=123456
#
## 指定分库的列和具体的分片算法
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=customer_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{customer_id % 2+1}
#
#
## 定义主键的生成策略
#spring.shardingsphere.sharding.tables.t_orders.key-generator.column=id
## 定义主键的生成算法为雪花算法
#spring.shardingsphere.sharding.tables.t_orders.key-generator.type=SNOWFLAKE
#
#
## 指定表的分片列和规则
#spring.shardingsphere.sharding.tables.t_orders.actual-data-nodes=ds$->{1..2}.t_orders_$->{1..2}
#spring.shardingsphere.sharding.tables.t_orders.table-strategy.inline.sharding-column=id
#spring.shardingsphere.sharding.tables.t_orders.table-strategy.inline.algorithm-expression=t_orders_$->{id % 2+1}
#
#
#
## 增加数据类的差异性 A 库 有100张表 99张分出去 1张不想分  那么就指定这一张表不分
#spring.shardingsphere.sharding.tables.t_person.actual-data-nodes=ds1.t_person
#spring.shardingsphere.sharding.tables.t_address.actual-data-nodes=ds2.t_address
##spring.shardingsphere.sharding.tables.t_person.table-strategy.inline.sharding-column=id
##spring.shardingsphere.sharding.tables.t_person.table-strategy.inline.algorithm-expression=t_person
#
##指定广播表
#spring.shardingsphere.sharding.broadcast-tables=dict_order_type
## 指定广播表定义主键的生成策略
#spring.shardingsphere.sharding.tables.dict_order_type.key-generator.column= id
## 指定广播表定义主键的生成算法为雪花算法
#spring.shardingsphere.sharding.tables.dict_order_type.key-generator.type=SNOWFLAKE
#spring.shardingsphere.sharding.tables.dict_order_type.key-generator.props.worker.id=123
#spring.shardingsphere.sharding.tables.dict_order_type.key-generator.props.max.vibration.offset=2
#
#
#
##单库配置
##spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds$->{0..1}.t_order_item$->{0..1}
##spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column=order_id
##spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item$->{order_id % 2}
#
## 系统提示 显示正常的sql语句
#spring.shardingsphere.props.sql.show=true

#-------------------------------------------------------------------------------------------------------------------------
# 基于读写分离的搭建 数据库要自己设置读写分离
spring.shardingsphere.datasource.names=master,slave

spring.shardingsphere.datasource.master.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.master.url=jdbc:mysql://192.168.72.80:3306/sharding-rw-master
spring.shardingsphere.datasource.master.username=root
spring.shardingsphere.datasource.master.password=123456

spring.shardingsphere.datasource.slave.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.slave.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.slave.url=jdbc:mysql://192.168.72.81:3306/sharding-rw-slave
spring.shardingsphere.datasource.slave.username=root
spring.shardingsphere.datasource.slave.password=123456


spring.shardingsphere.masterslave.load-balance-algorithm-type=round_robin
spring.shardingsphere.masterslave.name=ms
spring.shardingsphere.masterslave.master-data-source-name=master
spring.shardingsphere.masterslave.slave-data-source-names=slave

spring.shardingsphere.props.sql.show=false

##——-------------------------------------------------------
#  # 编排治理 zookeeper管理
#spring.shardingsphere.orchestration.name=orchestration-sharding-data-source
#spring.shardingsphere.orchestration.overwrite=true
#spring.shardingsphere.orchestration.registry.type=zookeeper
#spring.shardingsphere.orchestration.registry.server-lists=192.168.72.74:2181
#spring.shardingsphere.orchestration.registry.namespace=sharding-jdbc-spring-boot